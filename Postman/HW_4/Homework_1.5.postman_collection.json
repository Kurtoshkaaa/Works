{
	"info": {
		"_postman_id": "eb5a0731-1abc-4b79-a1d1-b74e7f0dd8bd",
		"name": "Homework_1.5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body is string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body in JSON\", function () {\r",
							"    let responseJson = pm.response.json();\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Name=name, age=age, salary=salary\", () => {\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql(\"Kurto\")\r",
							"    pm.expect(responseJson.age).to.eql(\"28\")\r",
							"    pm.expect(responseJson.salary).to.eql(1500)\r",
							"\r",
							"});\r",
							"\r",
							"let Request = request.data;\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"name ok\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(Request.name);\r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"age ok\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(Request.age);\r",
							"\r",
							"});\r",
							"\r",
							"let salary_int = +Request.salary\r",
							"\r",
							"pm.test(\"salary ok\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(salary_int)\r",
							"\r",
							"});\r",
							"\r",
							"console.log(responseJson.family)\r",
							"\r",
							"pm.test(\"salary x4 \", function () {\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(salary_int*4);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kurto",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let Request = \r",
							"    pm.request.url.query.toObject();\r",
							"\r",
							"\r",
							"pm.test(\"name = name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(Request.name)\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"age = age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(Request.age)\r",
							"\r",
							"});\r",
							"\r",
							"salary_int = +Request.salary\r",
							"\r",
							"pm.test(\"salary = salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(salary_int)\r",
							"    \r",
							"});\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"pm.test(\"dog age+name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.keys([\"age\", \"name\"]);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"dog name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name) !== null;\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"dog age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age) !== null;\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"name = Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"name = Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kurto&age=28&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kurto"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json ();\r",
							"\r",
							"let Request = \r",
							"    pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"name = name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(Request.name)\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"let age_age = +Request.age\r",
							"\r",
							"pm.test(\"age = age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(age_age)\r",
							"\r",
							"});\r",
							"\r",
							"console.log(Request.salary)\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"\r",
							"let salary_salary = +Request.salary\r",
							"\r",
							"pm.test(\"salary = salary_rqst\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary_salary)\r",
							"\r",
							"});\r",
							"\r",
							"let salary2_salary = +jsonData.salary[1]\r",
							"\r",
							"pm.test(\"salary = salary_rqst2\", function () {\r",
							"    pm.expect(salary2_salary).to.eql(salary_salary*2)\r",
							"\r",
							"});\r",
							"\r",
							"let salary3_salary = +jsonData.salary[2]\r",
							"\r",
							"pm.test(\"salary = salary_rqst2\", function () {\r",
							"    pm.expect(salary3_salary).to.eql(salary_salary*3)\r",
							"\r",
							"});\r",
							"\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (var i=0; i<jsonData.salary.length; i++) {\r",
							"    console.log(jsonData.salary[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kurto&age=28&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kurto"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let Request = request.data;\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).not.to.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).not.to.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).not.to.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_1_5_year).not.to.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_3_5_year).not.to.eql(null);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_person\", function () {\r",
							"    pm.expect(jsonData.person).not.to.eql(null);\r",
							"});\r",
							"\r",
							"\r",
							"let salary = +Request.salary\r",
							"\r",
							"pm.test(\"salary = start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"salary = salary_after_6_mnths\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*2);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"salary = salary_after_12_mnths\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary*2.7);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"salary = salary_after_12_mnths\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(salary*3.3);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"salary = salary_after_12_mnths\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(salary*3.8)\r",
							"\r",
							"});\r",
							"\r",
							"let u_name_salary = jsonData.person.u_name[1];\r",
							"\r",
							"pm.test(\"u_name\", function () {\r",
							"    pm.expect(u_name_salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"let age = +Request.age;\r",
							"\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(age);\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_5_years_equal\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(salary*4.2);\r",
							"});\r",
							"\r",
							"pm.test(\"person\", function () {\r",
							" Object.keys(jsonData.person).forEach(function(i)  {\r",
							"  console.log(i, jsonData.person[i]);\r",
							"})});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{slry}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}